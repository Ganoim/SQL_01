-----day11
/* INNER JOIN  */
SELECT *
FROM ORDERS OD INNER JOIN MEMBERS M ON M.MID = OD.ODMID;

SELECT *
FROM MEMBERS M INNER JOIN ORDERS OD ON M.MID = OD.ODMID;

/* OUTER JOIN, ORDERS, MEMBERS */

SELECT *
FROM ORDERS OD LEFT OUTER JOIN MEMBERS M ON M.MID = OD.ODMID;

SELECT *
FROM MEMBERS M LEFT OUTER JOIN ORDERS OD ON M.MID = OD.ODMID;

SELECT *
FROM ORDERS OD RIGHT OUTER JOIN MEMBERS M ON M.MID = OD.ODMID;

SELECT *
FROM MEMBERS M RIGHT OUTER JOIN ORDERS OD ON M.MID = OD.ODMID;

SELECT *
FROM ORDERS OD FULL OUTER JOIN MEMBERS M ON M.MID = OD.ODMID;

SELECT *
FROM MEMBERS M FULL OUTER JOIN ORDERS OD ON M.MID = OD.ODMID;

/* 판매량이 많은순으로 정렬해서 상품 목록을 보여주세요 */
--1. 어떤 제품이 얼만큼 판매가 되었는지 조회 - ORDERS
SELECT ODGCODE, SUM(ODQTY)
FROM ORDERS
GROUP BY ODGCODE;

--2. 상품릏 판매량 수능로 정렬
SELECT *
FROM GOODS G INNER JOIN (SELECT ODGCODE, SUM(ODQTY)
                         FROM ORDERS
                         GROUP BY ODGCODE) OD
             ON G.GCODE = OD.ODGCODE;

SELECT *
FROM GOODS G LEFT OUTER JOIN (SELECT ODGCODE, SUM(ODQTY) AS TOTALQTY
                              FROM ORDERS
                              GROUP BY ODGCODE) OD
             ON G.GCODE = OD.ODGCODE
ORDER BY NVL(OD.TOTALQTY,0) DESC;
             
SELECT G.*, NVL(OD.TOTALQTY,0) AS TOTALQTY
FROM GOODS G LEFT OUTER JOIN (SELECT ODGCODE, SUM(ODQTY) AS TOTALQTY
                              FROM ORDERS
                              GROUP BY ODGCODE) OD
             ON G.GCODE = OD.ODGCODE
ORDER BY TOTALQTY DESC;

SELECT G.*, NVL(OD.TOTALQTY,0) AS TOTALQTY
FROM GOODS G LEFT OUTER JOIN (SELECT ODGCODE, SUM(ODQTY) AS TOTALQTY
                              FROM ORDERS
                              GROUP BY ODGCODE) OD
             ON G.GCODE = OD.ODGCODE
ORDER BY TOTALQTY DESC, G.GPRICE;

/* 메출액이 가장 높은 상품 순으로 정렬 */
--1. 상품별 매출액 조회 - ORDERS.ODQTY * GOODS.GPRICE
SELECT OD.ODGCODE, SUM(OD.ODQTY*G.GRPRICE) AS TOTALPRICE
FROM ORDERS OD, GOODS G
WHERE OD.ODGCODE = G.GCDE
GROUP BY OD.ODGCODE;

--2. 상품을 매출액 순으로 정렬
SELECT G.*, NVL(OD.TOTALPRICE,0) AS TOTALPRICE
FROM GOODS G LEFT OUTER JOIN (SELECT OD.ODGCODE, SUM(OD.ODQTY*G.GPRICE) AS TOTALPRICE
                              FROM ORDERS OD, GOODS G
                              WHERE OD.ODGCODE = G.GCODE
                              GROUP BY OD.ODGCODE) OD
            ON G.GCODE = OD.ODGCODE
ORDER BY TOTALPRICE DESC;

SELECT ROWNUM, G.*
FROM (SELECT G.*, NVL(OD.TOTALPRICE,0) AS TOTALPRICE
      FROM GOODS G LEFT OUTER JOIN (SELECT OD.ODGCODE, SUM(OD.ODQTY*G.GPRICE) AS TOTALPRICE
                              FROM ORDERS OD, GOODS G
                              WHERE OD.ODGCODE = G.GCODE
                              GROUP BY OD.ODGCODE) OD
            ON G.GCODE = OD.ODGCODE
      ORDER BY TOTALPRICE DESC) G; -- 

-- ROWNUM
SELECT ROWNUM, GOODS.*
FROM GOODS;

SELECT ROWNUM, GOODS.*
FROM GOODS
ORDER BY GPRICE DESC;

SELECT GOODS.*
FROM GOODS
ORDER BY GPRICE DESC; -- GPRICE를 기준으로 정렬

SELECT ROWNUM RN, GOODS.*
FROM (SELECT GOODS.*
      FROM GOODS
      ORDER BY GPRICE DESC) GOODS; -- GPRICE를 기준으로 정렬한것을 서브쿼리로 쓰고 ROWNUM을 이용해 위에서부터 순서대로 번호를 넣어준다(그럼 가장 비싼것부터 순위를 설정할 수 있다)

SELECT ROWNUM RN, GOODS.*
FROM (SELECT GOODS.*
      FROM GOODS
      ORDER BY GPRICE DESC) GOODS
WHERE ROWNUM BETWEEN 11 AND 20; -- 레코드가 안나옴

SELECT *
FROM(SELECT ROWNUM RN, GOODS.*
     FROM (SELECT GOODS.*
     FROM GOODS
     ORDER BY GPRICE DESC) GOODS)
WHERE RN BETWEEN 11 AND 20; -- GPRICE에 ROWNUM이 11~20까지를 조회

-- 상품을 매출액 순으로 정렬하고 제일 높은것 부터 순위설정
SELECT ROWNUM AS RK, G.*
FROM (SELECT G.*, NVL(OD.TOTALPRICE,0) AS TOTALPRICE
      FROM GOODS G LEFT OUTER JOIN (SELECT OD.ODGCODE, SUM(OD.ODQTY*G.GPRICE) AS TOTALPRICE
                              FROM ORDERS OD, GOODS G
                              WHERE OD.ODGCODE = G.GCODE
                              GROUP BY OD.ODGCODE) OD
            ON G.GCODE = OD.ODGCODE
      ORDER BY TOTALPRICE DESC) G;

-- 상품을 매출액 순위로 정렬한 것을 뷰를 이용에 하나의 가상의 테이블로 만들어서 쿼리문을 더 쉽게 작성할 수 있다
CREATE VIEW SALESRK
AS (SELECT ROWNUM AS RK, G.*
FROM (SELECT G.*, NVL(OD.TOTALPRICE,0) AS TOTALPRICE
      FROM GOODS G LEFT OUTER JOIN (SELECT OD.ODGCODE, SUM(OD.ODQTY*G.GPRICE) AS TOTALPRICE
                              FROM ORDERS OD, GOODS G
                              WHERE OD.ODGCODE = G.GCODE
                              GROUP BY OD.ODGCODE) OD
            ON G.GCODE = OD.ODGCODE
      ORDER BY TOTALPRICE DESC) G);

SELECT *
FROM SALESRK
WHERE RK BETWEEN 2 AND 5;

/* 가상테이블(VIEW)
CREATE VIEW -- 생성
CREATE OR REPLACE VIEW - 변경?
*/
CREATE OR REPLACE VIEW TESTVIEW1
AS (SELECT GCODE, GNAME FROM GOODS)
WITH READ ONLY; -- 읽기전용(조회만 가능)

CREATE OR REPLACE VIEW TESTVIEW1
AS (SELECT GCODE, GNAME FROM GOODS);

CREATE OR REPLACE VIEW TESTVIEW1
AS (SELECT * FROM GOODS G INNER JOIN ORDERS OD ON G.GCODE = OD.ODGCODE);

SELECT *
FROM TESTVIEW1;

UPDATE GOODS
SET GNAME = 'BANANAMILK'
WHERE GCODE = 'G0115';

UPDATE GOODS
SET GNAME = '바나나우유'
WHERE GCODE = 'G0115';

/* ORDERS, GOODS, MEMBERS 테이블을 INNER JOIN 한 VIEW 생성 */
SELECT * FROM ORDERS;
SELECT * FROM GOODS;
SELECT * FROM MEMBERS;

CREATE OR REPLACE VIEW SALESVIEW
AS (SELECT *
    FROM ORDERS OD INNER JOIN GOODS G 
                   ON OD.ODGCODE = G.GCODE 
                   INNER JOIN MEMBERS M 
                   ON M.MID = OD.ODMID);

SELECT * FROM SALESVIEW;

SELECT GNAME, MNAME
FROM SALESVIEW
WHERE TO_CHAR(ODDATE, 'YYYY-MM-DD') = '2023-06-01';
