/* FOREIGN KEY : 외래키 */
-- 기본키로 설정된 것만 외래키로 설정할 수 있고
/* 상품정보 테이블 - GOODS
    상품이름 - GNAME 문자 20글자까지, PRIMARY KEY로 지정
    상품가격 - GPRICE 숫자타입
    상춤브랜드 - GBRAND 문자타입 20글자까지 - NOT NULL
*/

CREATE TABLE GOODS(
    GNAME NVARCHAR2(20),
    GPRICE NUMBER,
    GBRAND NVARCHAR2(20)
);
-- 제약조건 부여
ALTER TABLE GOODS
ADD CONSTRAINT PK_GOODS_GNAME PRIMARY KEY(GNAME)
MODIFY GBRAND NOT NULL;
-- 상품정보입력
INSERT INTO GOODS(GNAME, GPRICE, GBRAND)
VALUES('7800X3D', '600000', 'AMD' );
INSERT INTO GOODS(GNAME, GPRICE, GBRAND)
VALUES('RTX4090', '2300000', 'NVIDIA' );
INSERT INTO GOODS(GNAME, GPRICE, GBRAND)
VALUES('RTX4070', '750000', 'NVIDIA' );

/* 주문내역 테이블 
    상품이름, 가격, 구매자, 주문일시, 배송지, 주문수량
    상품이름 문자20자
*/
CREATE  TABLE ORDERLIST(
    GNAME NVARCHAR2(20),     -- 상품이름
    GPRICE NUMBER,           -- 상품가격
    CUSTOMER NVARCHAR2(10),  -- 구매자
    ODDATE DATE,             -- 주문일시
    ADDRESS NVARCHAR2(50),    -- 배송지
    QTY NUMBER               -- 주문수
);
-- FOREIGN KEY : 외래기 지정
ALTER TABLE ORDERLIST
ADD CONSTRAINT FK_ODLIST_GNAME FOREIGN KEY(GNAME)
REFERENCES GOODS(GNAME);
-- 주문 정보 입력
INSERT INTO ORDERLIST(GNAME, GPRICE, CUSTOMER, ODDATE, ADDRESS, QTY)
VALUES('7800X3D', 600000, '전관호', SYSDATE, '인천', 1);
INSERT INTO ORDERLIST(GNAME, GPRICE, CUSTOMER, ODDATE, ADDRESS, QTY)
VALUES('7800X3D', 600000, '홍길동', SYSDATE, '인천', 1);
INSERT INTO ORDERLIST(GNAME, GPRICE, CUSTOMER, ODDATE, ADDRESS, QTY)
VALUES('RTX4070', 750000, 'ICIA', SYSDATE, '인천일보아카데미', 1);
INSERT INTO ORDERLIST(GNAME, GPRICE, CUSTOMER, ODDATE, ADDRESS, QTY)
VALUES('RTX4090', 2300000, 'ICAI', SYSDATE, '인천일보아카데미', 1);

SELECT * FROM ORDERLIST;

INSERT INTO ORDERLIST(GNAME, GPRICE, CUSTOMER, ODDATE, ADDRESS, QTY)
VALUES('사이다', 1000, '전관호', SYSDATE, '인천', 1); -- ORA-02291: 무결성 제약조건(JGH_DBA.FK_ODLIST_GNAME)이 위배되었습니다- 부모 키가 없습니다

-- 1. ORDERLIST 테이블의 상품이름
SELECT GNAME FROM ORDERLIST;

/*
CREATE - INSERT : 데이터 입력
READ   - SELECT : 테이터 조회
UPDATE - UPEATE : 데이터 수정
DELETE - DELETE : 데이터 삭제
*/
/* INSERT문
   INSERT INTO 테이블이름( 컬럼명1, 컬럼명2,....컬러명N )
   VALUES( 컬럼1에 저장할 값, 컬럼2에 저장할 값,.... );
*/
DROP TABLE ORDERLIST;
DROP TABLE GOODS;
CREATE TABLE GOODS(
    GNAME NVARCHAR2(20),
    GPRICE NUMBER,
    GBRAND NVARCHAR2(20)
);
INSERT INTO GOODS(GNAME, GPRICE, GBRAND)
VALUES('상품명1', 10000, '브랜드1');
INSERT INTO GOODS(GNAME, GPRICE, GBRAND)
VALUES('브랜드2', 10000, '상품명2');
INSERT INTO GOODS( GPRICE, GBRAND, GNAME)
VALUES( 10000, '브랜드3', '상품명3');
INSERT INTO GOODS(GNAME, GBRAND)
VALUES('상품명4', '브랜드4');
INSERT INTO GOODS(GBRAND)
VALUES('브랜드5');
-- 컬럼명을 명시X VALUES항목은 테이블의 모든 컬럼값
INSERT INTO GOODS
VALUES('상품명6', 20000, '브랜드6'); -- GNAME, GPRICE, GBRAND
SELECT * FROM GOODS;
SELECT * FROM GOODS WHERE GPRICE = 10000;

/* 데이터 조회 - SELECT 
[5]SELECT 조회할컬럼명, 조회할컬럼명2...
[1]FROM 테이블명 
[2]WHERE 조건
[3]GROUP BY 그룹을 나눌 컬럼
[4]HAVING 나눠진 그룹에 부여할 조건
[6]ORDER BY 정렬기준컬럼
*/

/* 데이터 수정 : UPDATE
    UPDATE 테이블명
    SET 컬럼명1 = 수정할 데이터, 컬럼명2 = 수정할 데이터
    WHERE 데이터를 수정할 레코드를 선별할 조건
*/
SELECT * FROM GOODS;

UPDATE GOODS 
SET GPRICE = 1500; -- 6개 행 이(가) 업데이트되었습니다.

UPDATE GOODS
SET GPRICE = 10000
WHERE GNAME = '상품명1'; -- 1 행 이(가) 업데이트되었습니다.

UPDATE GOODS
SET GPRICE = 15000, GBRAND = '브랜드명수정'
WHERE GNAME = '상품명1';

/* 데이터 삭제 : DELETE
    DELETE FROM 테이블명
    WHERE 삭제할 레코드를 선별하는 조건
*/              
DELETE FROM GOODS
WHERE GNAME = '상품명1'; -- 1 행 이(가) 삭제되었습니다.
DELETE FROM GOODS; -- 테이블은 남아있고 모든 레코드가 지워짐(모든 행 삭제)

SELECT * FROM GOODS;
CREATE TABLE GOODS(
    GNAME NVARCHAR2(20),
    GPRICE NUMBER,
    GBRAND NVARCHAR2(20)
);
INSERT INTO GOODS(GNAME, GPRICE, GBRAND)
VALUES('상품명1', 10000, '브랜드1');
INSERT INTO GOODS(GNAME, GPRICE, GBRAND)
VALUES('브랜드2', 10000, '상품명2');
SELECT * FROM GOODS; -- 레코드 2개
ROLLBACK;            -- 이전 상태로(테이블만 만든상태)
SELECT * FROM GOODS; -- 레코드 없음

INSERT INTO GOODS(GNAME, GPRICE, GBRAND)
VALUES('상품명1', 10000, '브랜드1');
INSERT INTO GOODS(GNAME, GPRICE, GBRAND)
VALUES('브랜드2', 10000, '상품명2');
COMMIT;  -- 예정되어있는 데이터 저장(확정)
ROLLBACK;-- 커밋을 한 시점으로 롤백(되돌림)
SELECT * FROM GOODS; -- 레코드 2개

INSERT INTO GOODS(GNAME, GPRICE, GBRAND)
VALUES('상품명3', 30000, '브랜드3');
ROLLBACK;
SELECT * FROM GOODS;

CREATE TABLE TESTTBL01(COL01 NUMBER); -- CREATE, ALTER, DROP은 자동으로 커밋된다
ROLLBACK;
SELECT * FROM TESTTBL01;
